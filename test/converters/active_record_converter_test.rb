require File.dirname(__FILE__) + '/../test_helper.rb'

#
#  FIXME: remove xml serialzation here and test resource directly. 
#
context "active record converter" do
  setup do
    Person.restful_publish(:name, :wallet, :current_location, :pets => [:name, :species])
    Pet.restful_publish(:person_id, :name) # person_id gets converted to a link automagically.
    
    @person = Person.create(:name => "Joe Bloggs", :current_location => "Under a tree")
    @wallet = @person.wallet = Wallet.create!(:contents => "something in the wallet")
    @pet = @person.pets.create(:name => "Mietze", :species => "cat")
  end
  
  teardown do
    reset_config
  end
  
  specify "should return link attributes from a model" do
    @pet.to_restful.links.map { |node| node.name }.sort.should.equal [:person_id]
  end
  
  specify "should return plain attributes from a model" do
    @pet.to_restful.simple_attributes.map { |node| node.name }.should.equal [:name]
  end
  
  specify "should return collections attributes from a model" do
    restful = @person.to_restful
    restful.collections.map { |node| node.name }.sort.should.equal [:pets]
  end
  
  specify "should be able to convert themselves to an apimodel containing all and only the attributes exposed by Model.publish_api" do    
    resource = @person.to_restful
    
    resource.simple_attributes.select { |node| node.name == :name }.should.not.blank
    resource.simple_attributes.select { |node| node.name == :biography }.should.blank

    mietze = @person.to_restful.collections .select { |node| node.name == :pets }.first.value.first
    mietze.simple_attributes.size.should.== 2
    mietze.simple_attributes.select { |node| node.name == :name }.should.not.blank
    mietze.simple_attributes.select { |node| node.name == :species }.should.not.blank
  end

  specify "should be able to convert themselves to an apimodel containing all and only the attributes exposed by Model.publish_api. this holds true if to_restful is called with some configuration options. " do    
    resource = @person.to_restful(:restful_options => { :nested => false })
    resource.simple_attributes.select { |node| node.name == :name }.should.not.blank
    resource.simple_attributes.select { |node| node.name == :biography }.should.blank

    mietze = resource.collections .select { |node| node.name == :pets }.first.value.first
    mietze.simple_attributes.size.should.== 2
    mietze.simple_attributes.select { |node| node.name == :name }.should.not.blank
    mietze.simple_attributes.select { |node| node.name == :species }.should.not.blank
  end
  
  specify "should be able to override to_restful published fields by passing them into the method" do
    api = @person.to_restful(:pets)

    api.simple_attributes.should.blank?
    api.collections.map { |node| node.name }.sort.should.equal [:pets]
  end
  
  specify "should be able to handle relations that are nil/null" do
    @person.wallet = nil
    @person.save!
    @person.reload

    assert_nothing_raised do
      @person.to_restful
    end
  end

  specify "should be able to expand a :belongs_to relationship" do
    actual = @pet.to_restful(:owner).serialize(:xml)

    expected = <<EXPECTED
<?xml version="1.0" encoding="UTF-8"?>
<pet>
  <restful-url type="link">http://example.com:3000/pets/#{ @pet.id }</restful-url>
  <owner>
    <restful-url type="link">http://example.com:3000/people/#{ @person.id }</restful-url>
    <name>Joe Bloggs</name>
    <current-location>Under a tree</current-location>
    <wallet-restful-url type="link">http://example.com:3000/wallets/#{ @wallet.id }</wallet-restful-url>
  </owner>
</pet>
EXPECTED

    xml_should_be_same(expected, actual)
  end

  specify "should return collapsed resources by default when :expansion => :collapsed is passed" do
    Person.restful_publish(:name, :wallet, :restful_options => { :expansion => :collapsed })
    actual = @person.to_restful.serialize(:xml)

    expected = <<EXPECTED
<?xml version="1.0" encoding="UTF-8"?>
<person>
  <restful-url type="link">http://example.com:3000/people/#{ @person.id }</restful-url>
  <name>Joe Bloggs</name>
  <wallet-restful-url type="link">http://example.com:3000/wallets/#{ @wallet.id }</wallet-restful-url>
</person>
EXPECTED

    xml_should_be_same(expected, actual)
  end

  specify "should be able to export content generated by methods that return strings" do
    actual = @person.to_restful(:location_sentence).serialize(:xml)

    expected = <<EXPECTED
<?xml version="1.0" encoding="UTF-8"?>
<person>
  <restful-url type="link">http://example.com:3000/people/#{ @person.id }</restful-url>
  <location-sentence>#{ @person.location_sentence }</location-sentence>
</person>
EXPECTED

    xml_should_be_same(expected, actual)
  end

  specify "should be able to export content generated by methods (not attributes) and compute the correct style" do
    actual = @person.to_restful(:oldest_pet).serialize(:xml)
    oldest = @person.oldest_pet

    expected = <<EXPECTED
<?xml version="1.0" encoding="UTF-8"?>
<person>
  <restful-url type="link">http://example.com:3000/people/#{ @person.id }</restful-url>
  <oldest-pet>
    <restful-url type="link">http://example.com:3000/pets/#{ oldest.id }</restful-url>
    <name>#{ oldest.name }</name>
    <person-restful-url type="link">http://example.com:3000/people/#{ @person.id }</person-restful-url>
  </oldest-pet>
</person>
EXPECTED

    xml_should_be_same(expected, actual)
  end

  specify "should be able to export content generated by methods (not attributes) while filtering with a nested configuration" do
    actual = @person.to_restful(:oldest_pet => [:species]).serialize(:xml)
    oldest = @person.oldest_pet

    expected = <<EXPECTED
<?xml version="1.0" encoding="UTF-8"?>
<person>
  <restful-url type="link">http://example.com:3000/people/#{ @person.id }</restful-url>
  <oldest-pet>
    <restful-url type="link">http://example.com:3000/pets/#{ oldest.id }</restful-url>
    <species type=\"integer\">#{ oldest.species }</species>
  </oldest-pet>
</person>
EXPECTED

    xml_should_be_same(expected, actual)    
  end

  specify "should create element with nil='true' attribute if no relation is set" do 
    @person.wallet = nil
    @person.save

    actual = @person.to_restful(:wallet).serialize(:xml)
    expected = <<EXPECTED
<?xml version="1.0" encoding="UTF-8"?>
<person>
  <restful-url type="link">http://example.com:3000/people/#{ @person.id }</restful-url>
  <wallet nil="true"></wallet>
</person>
EXPECTED

    xml_should_be_same(expected, actual)
  end
end